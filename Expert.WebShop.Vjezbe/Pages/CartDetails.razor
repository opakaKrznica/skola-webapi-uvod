@page "/shopping-cart"
@using models;
@inject ShoppingCartInMemory shoppingCartInMemory;
@inject HttpClient httpClient;
@inject NavigationManager navManager;

<div class="bg-info text-dark font-weight-bolder px-3  d-flex justify-content-between">
    <h3 class="mt-3 p-2">  Shopping Cart  </h3>
    <button type="button" class="btn-secondary m-3 p-2 " @onclick="Return">
     Back to products
    </button>
   
</div>

@{
    double sum = 0;

}

<div class="d-flex justify-content-center  bg-secondary ">
    <ul class="list-unstyled">
    @foreach (var item in shoppingCartInMemory.selectedItems.OrderBy(x => x.ProductId))
    {     
        <li>
            <div class="container ">
                <div class="card  text-center p-2 mt-3" style="width: 20rem">
                    <div class="card-body">
                        <h4 class="card-title bg-info text-dark  p-2">
                            @item.Product.ProductName
                        </h4>
                        <br /><br />
                        <p class="card-text fs-4">
                            @item.Product.ProductDescription
                        </p>
                        <br />
                        <p class="card-text fs-4">
                            Price: @item.Product.ProductPrice
                        </p>
                        <br />
                        <p class="card-text fs-4">
                            Discount: @item.Product.Discount
                        </p>
                        <br />
                        <div>
                            @{
                                if (item.Product.Discount < 1)
                                {
                                    var sumItem = Convert.ToDouble(item.Product.ProductPrice) *
                                    Convert.ToDouble(item.NumberOfItems);

                                    sum = sum + sumItem;

                                    <p> Product price= @sumItem </p>
                                }
                                else
                                {

                                    var discount = ((Convert.ToDouble(item.Product.Discount) / 100) *
                                    Convert.ToDouble(item.Product.ProductPrice));

                                    var result = Math.Round(Convert.ToDouble(item.Product.ProductPrice) - discount, 2);

                                    result = result * item.NumberOfItems;

                                    sum = sum + result;

                                    <div class="card-text fs-4 pb-4">
                                        Discount price: @result
                                        <br />
                                        <br />
                                        <div>
                                            <button type="button" @onclick="()=>Decrement(item.ProductId)">-</button>
                                            <input type="number " @bind-value="item.NumberOfItems" size="6" disable=disabled>
                                            <button type="button" @onclick="()=>Increment(item.ProductId)">+</button>
                                        </div>
                                        <div>
                                            <button type="button" class="btn-danger mt-3 p-2 " @onclick="()=>DeleteProd(item.ProductId)">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                    </div>
                </div>
            </div>
        </li>
            
    }
        <div class="card-text bg-info text-center m-2 p-4" style=" width: 20rem">
            <h4>Total cash: @sum Eur</h4>
        </div>
    </ul>
</div>


@code {
    [Parameter]
    public int Id { get; set; }

    public async Task Decrement(int prodId)
    {
        var decrease = shoppingCartInMemory.selectedItems.FirstOrDefault(x => x.ProductId == prodId);

        if (decrease.NumberOfItems > 1)
        {

            shoppingCartInMemory.selectedItems.Remove(decrease);

            decrease.NumberOfItems = decrease.NumberOfItems - 1;

            shoppingCartInMemory.selectedItems.Add(decrease);

            StateHasChanged();
        }
    }

    public async Task Increment(int prodId)
    {
        var increase = shoppingCartInMemory.selectedItems.FirstOrDefault(x => x.ProductId == prodId);

        shoppingCartInMemory.selectedItems.Remove(increase);

        increase.NumberOfItems = increase.NumberOfItems + 1;

        shoppingCartInMemory.selectedItems.Add(increase);

        StateHasChanged();
    }
    private async Task DeleteProd(int id)
    {
        var delete = shoppingCartInMemory.selectedItems.FirstOrDefault(x => x.ProductId == id);
        shoppingCartInMemory.selectedItems.Remove(delete);
        StateHasChanged();
             
    }
    private async void Return()
    {
        navManager.NavigateTo("Admin/product-list");
    }

}
